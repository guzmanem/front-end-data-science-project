{"ast":null,"code":"import _regeneratorRuntime from \"/home/jercker/excel-app (1)/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/jercker/excel-app (1)/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"/home/jercker/excel-app (1)/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/home/jercker/excel-app (1)/src/components/excelPage.js\";\nimport React, { Component } from \"react\";\nimport { Table, Button, Popconfirm, Row, Col, Icon, Upload } from \"antd\";\nimport { ExcelRenderer } from \"react-excel-renderer\";\nimport { EditableFormRow, EditableCell } from \"../utils/editable\";\nexport default class ExcelPage extends Component {\n  constructor(props) {\n    var _this;\n\n    super(props);\n    _this = this;\n\n    this.handleSave = row => {\n      const newData = [...this.state.rows];\n      const index = newData.findIndex(item => row.key === item.key);\n      const item = newData[index];\n      newData.splice(index, 1, _objectSpread(_objectSpread({}, item), row));\n      this.setState({\n        rows: newData\n      });\n    };\n\n    this.fileHandler = fileList => {\n      console.log(\"fileList\", fileList);\n      let fileObj = fileList;\n\n      if (!fileObj) {\n        this.setState({\n          errorMessage: \"No file uploaded!\"\n        });\n        return false;\n      }\n\n      console.log(\"fileObj.type:\", fileObj.type);\n\n      if (!(fileObj.type === \"application/vnd.ms-excel\" || fileObj.type === \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\")) {\n        this.setState({\n          errorMessage: \"Unknown file format. Only Excel files are uploaded!\"\n        });\n        return false;\n      } //just pass the fileObj as parameter\n\n\n      ExcelRenderer(fileObj, (err, resp) => {\n        if (err) {\n          console.log(err);\n        } else {\n          let newRows = [];\n          resp.rows.slice(1).map((row, index) => {\n            if (row && row !== \"undefined\") {\n              newRows.push({\n                key: index,\n                name: row[0],\n                age: row[1],\n                gender: row[2]\n              });\n            }\n          });\n\n          if (newRows.length === 0) {\n            this.setState({\n              errorMessage: \"No data found in file!\"\n            });\n            return false;\n          } else {\n            this.setState({\n              cols: resp.cols,\n              rows: newRows,\n              errorMessage: null\n            });\n          }\n        }\n      });\n      return false;\n    };\n\n    this.handleSubmit = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            console.log(\"submitting: \", _this.state.rows); //submit to API\n            //if successful, banigate and clear the data\n            //this.setState({ rows: [] })\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n\n    this.handleDelete = key => {\n      const rows = [...this.state.rows];\n      this.setState({\n        rows: rows.filter(item => item.key !== key)\n      });\n    };\n\n    this.handleAdd = () => {\n      const _this$state = this.state,\n            count = _this$state.count,\n            rows = _this$state.rows;\n      const newData = {\n        key: count,\n        name: \"User's name\",\n        age: \"22\",\n        gender: \"Female\"\n      };\n      this.setState({\n        rows: [newData, ...rows],\n        count: count + 1\n      });\n    };\n\n    this.state = {\n      cols: [],\n      rows: [],\n      errorMessage: null,\n      columns: [{\n        title: \"test\",\n        dataIndex: \"name\",\n        editable: true\n      }, {\n        title: \"AGE\",\n        dataIndex: \"age\",\n        editable: true\n      }, {\n        title: \"GENDER\",\n        dataIndex: \"gender\",\n        editable: true\n      }, {\n        title: \"Action\",\n        dataIndex: \"action\",\n        render: (text, record) => this.state.rows.length >= 1 ? /*#__PURE__*/React.createElement(Popconfirm, {\n          title: \"Sure to delete?\",\n          onConfirm: () => this.handleDelete(record.key),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(Icon, {\n          type: \"delete\",\n          theme: \"filled\",\n          style: {\n            color: \"red\",\n            fontSize: \"20px\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 17\n          }\n        })) : null\n      }]\n    };\n  }\n\n  checkFile(file) {\n    let errorMessage = \"\";\n\n    if (!file || !file[0]) {\n      return;\n    }\n\n    const isExcel = file[0].type === \"application/vnd.ms-excel\" || file[0].type === \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\";\n\n    if (!isExcel) {\n      errorMessage = \"You can only upload Excel file!\";\n    }\n\n    console.log(\"file\", file[0].type);\n    const isLt2M = file[0].size / 1024 / 1024 < 2;\n\n    if (!isLt2M) {\n      errorMessage = \"File must be smaller than 2MB!\";\n    }\n\n    console.log(\"errorMessage\", errorMessage);\n    return errorMessage;\n  }\n\n  render() {\n    const components = {\n      body: {\n        row: EditableFormRow,\n        cell: EditableCell\n      }\n    };\n    const columns = this.state.columns.map(col => {\n      if (!col.editable) {\n        return col;\n      }\n\n      return _objectSpread(_objectSpread({}, col), {}, {\n        onCell: record => ({\n          record,\n          editable: col.editable,\n          dataIndex: col.dataIndex,\n          title: col.title,\n          handleSave: this.handleSave\n        })\n      });\n    });\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }\n    }, \"Importing Excel Component\"), /*#__PURE__*/React.createElement(Row, {\n      gutter: 16,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      span: 8,\n      style: {\n        display: \"flex\",\n        justifyContent: \"space-between\",\n        alignItems: \"center\",\n        marginBottom: \"5%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        display: \"flex\",\n        alignItems: \"center\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"page-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 15\n      }\n    }, \"Upload Farmer Data\"))), /*#__PURE__*/React.createElement(Col, {\n      span: 8,\n      align: \"right\",\n      style: {\n        display: \"flex\",\n        justifyContent: \"space-between\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 11\n      }\n    }, this.state.rows.length == 0 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n      onClick: this.handleAdd,\n      size: \"large\",\n      type: \"info\",\n      style: {\n        marginBottom: 16\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Icon, {\n      type: \"plus\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 19\n      }\n    }), \"Add a row\"), \" \", /*#__PURE__*/React.createElement(Button, {\n      onClick: this.handleSubmit,\n      size: \"large\",\n      type: \"primary\",\n      style: {\n        marginBottom: 16,\n        marginLeft: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 17\n      }\n    }, \"Submit Data\")))), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Upload, {\n      name: \"file\",\n      beforeUpload: this.fileHandler,\n      onRemove: () => this.setState({\n        rows: []\n      }),\n      multiple: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Icon, {\n      type: \"upload\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 15\n      }\n    }), \" Click to Upload Excel File\"))), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        marginTop: 20\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Table, {\n      components: components,\n      rowClassName: () => \"editable-row\",\n      dataSource: this.state.rows,\n      columns: columns,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}","map":{"version":3,"sources":["/home/jercker/excel-app (1)/src/components/excelPage.js"],"names":["React","Component","Table","Button","Popconfirm","Row","Col","Icon","Upload","ExcelRenderer","EditableFormRow","EditableCell","ExcelPage","constructor","props","handleSave","row","newData","state","rows","index","findIndex","item","key","splice","setState","fileHandler","fileList","console","log","fileObj","errorMessage","type","err","resp","newRows","slice","map","push","name","age","gender","length","cols","handleSubmit","handleDelete","filter","handleAdd","count","columns","title","dataIndex","editable","render","text","record","color","fontSize","checkFile","file","isExcel","isLt2M","size","components","body","cell","col","onCell","display","justifyContent","alignItems","marginBottom","marginLeft","marginTop"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Table, Button, Popconfirm, Row, Col, Icon, Upload } from \"antd\";\nimport { ExcelRenderer } from \"react-excel-renderer\";\nimport { EditableFormRow, EditableCell } from \"../utils/editable\";\n\nexport default class ExcelPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cols: [],\n      rows: [],\n      errorMessage: null,\n      columns: [\n        {\n          title: \"test\",\n          dataIndex: \"name\",\n          editable: true\n        },\n        {\n          title: \"AGE\",\n          dataIndex: \"age\",\n          editable: true\n        },\n        {\n          title: \"GENDER\",\n          dataIndex: \"gender\",\n          editable: true\n        },\n        {\n          title: \"Action\",\n          dataIndex: \"action\",\n          render: (text, record) =>\n            this.state.rows.length >= 1 ? (\n              <Popconfirm\n                title=\"Sure to delete?\"\n                onConfirm={() => this.handleDelete(record.key)}\n              >\n                <Icon\n                  type=\"delete\"\n                  theme=\"filled\"\n                  style={{ color: \"red\", fontSize: \"20px\" }}\n                />\n              </Popconfirm>\n            ) : null\n        }\n      ]\n    };\n  }\n\n  handleSave = row => {\n    const newData = [...this.state.rows];\n    const index = newData.findIndex(item => row.key === item.key);\n    const item = newData[index];\n    newData.splice(index, 1, {\n      ...item,\n      ...row\n    });\n    this.setState({ rows: newData });\n  };\n\n  checkFile(file) {\n    let errorMessage = \"\";\n    if (!file || !file[0]) {\n      return;\n    }\n    const isExcel =\n      file[0].type === \"application/vnd.ms-excel\" ||\n      file[0].type ===\n        \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\";\n    if (!isExcel) {\n      errorMessage = \"You can only upload Excel file!\";\n    }\n    console.log(\"file\", file[0].type);\n    const isLt2M = file[0].size / 1024 / 1024 < 2;\n    if (!isLt2M) {\n      errorMessage = \"File must be smaller than 2MB!\";\n    }\n    console.log(\"errorMessage\", errorMessage);\n    return errorMessage;\n  }\n\n  fileHandler = fileList => {\n    console.log(\"fileList\", fileList);\n    let fileObj = fileList;\n    if (!fileObj) {\n      this.setState({\n        errorMessage: \"No file uploaded!\"\n      });\n      return false;\n    }\n    console.log(\"fileObj.type:\", fileObj.type);\n    if (\n      !(\n        fileObj.type === \"application/vnd.ms-excel\" ||\n        fileObj.type ===\n          \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n      )\n    ) {\n      this.setState({\n        errorMessage: \"Unknown file format. Only Excel files are uploaded!\"\n      });\n      return false;\n    }\n    //just pass the fileObj as parameter\n    ExcelRenderer(fileObj, (err, resp) => {\n      if (err) {\n        console.log(err);\n      } else {\n        let newRows = [];\n        resp.rows.slice(1).map((row, index) => {\n          if (row && row !== \"undefined\") {\n            newRows.push({\n              key: index,\n              name: row[0],\n              age: row[1],\n              gender: row[2]\n            });\n          }\n        });\n        if (newRows.length === 0) {\n          this.setState({\n            errorMessage: \"No data found in file!\"\n          });\n          return false;\n        } else {\n          this.setState({\n            cols: resp.cols,\n            rows: newRows,\n            errorMessage: null\n          });\n        }\n      }\n    });\n    return false;\n  };\n\n  handleSubmit = async () => {\n    console.log(\"submitting: \", this.state.rows);\n    //submit to API\n    //if successful, banigate and clear the data\n    //this.setState({ rows: [] })\n  };\n\n  handleDelete = key => {\n    const rows = [...this.state.rows];\n    this.setState({ rows: rows.filter(item => item.key !== key) });\n  };\n  handleAdd = () => {\n    const { count, rows } = this.state;\n    const newData = {\n      key: count,\n      name: \"User's name\",\n      age: \"22\",\n      gender: \"Female\"\n    };\n    this.setState({\n      rows: [newData, ...rows],\n      count: count + 1\n    });\n  };\n\n  render() {\n    const components = {\n      body: {\n        row: EditableFormRow,\n        cell: EditableCell\n      }\n    };\n    const columns = this.state.columns.map(col => {\n      if (!col.editable) {\n        return col;\n      }\n      return {\n        ...col,\n        onCell: record => ({\n          record,\n          editable: col.editable,\n          dataIndex: col.dataIndex,\n          title: col.title,\n          handleSave: this.handleSave\n        })\n      };\n    });\n    return (\n      <>\n        <h1>Importing Excel Component</h1>\n        <Row gutter={16}>\n          <Col\n            span={8}\n            style={{\n              display: \"flex\",\n              justifyContent: \"space-between\",\n              alignItems: \"center\",\n              marginBottom: \"5%\"\n            }}\n          >\n            <div style={{ display: \"flex\", alignItems: \"center\" }}>\n              <div className=\"page-title\">Upload Farmer Data</div>\n            </div>\n          </Col>\n          <Col\n            span={8}\n            align=\"right\"\n            style={{ display: \"flex\", justifyContent: \"space-between\" }}\n          >\n            {this.state.rows.length == 0 && (\n              <>\n                <Button\n                  onClick={this.handleAdd}\n                  size=\"large\"\n                  type=\"info\"\n                  style={{ marginBottom: 16 }}\n                >\n                  <Icon type=\"plus\" />\n                  Add a row\n                </Button>{\" \"}\n                <Button\n                  onClick={this.handleSubmit}\n                  size=\"large\"\n                  type=\"primary\"\n                  style={{ marginBottom: 16, marginLeft: 10 }}\n                >\n                  Submit Data\n                </Button>\n              </>\n            )}\n          </Col>\n        </Row>\n        <div>\n          <Upload\n            name=\"file\"\n            beforeUpload={this.fileHandler}\n            onRemove={() => this.setState({ rows: [] })}\n            multiple={false}\n          >\n            <Button>\n              <Icon type=\"upload\" /> Click to Upload Excel File\n            </Button>\n          </Upload>\n        </div>\n        <div style={{ marginTop: 20 }}>\n          <Table\n            components={components}\n            rowClassName={() => \"editable-row\"}\n            dataSource={this.state.rows}\n            columns={columns}\n          />\n        </div>\n      </>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}